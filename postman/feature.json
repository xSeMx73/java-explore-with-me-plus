{
	"info": {
		"_postman_id": "fa492a09-9418-45a3-983e-e21d11f9e592",
		"name": "Feature subscriptions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35368237"
	},
	"item": [
		{
			"name": "Запрос на добавление подписки на человека",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/subscriptions/:subscriberId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriberId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "subscriberId",
							"value": "2"
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Запрос на добавление человека в черный список",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/:userId/black-list/:blackListId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"black-list",
						":blackListId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "blackListId",
							"value": "4"
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Запрос на удаление человека из черного списка",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/users/:userId/black-list/:blackListId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"black-list",
						":blackListId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3",
							"description": "(Required) id пользователя"
						},
						{
							"key": "blackListId",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос на удаление человека из списка подписок",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/users/:userId/subscriptions/:subscriberId",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"subscriptions",
						":subscriberId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1",
							"description": "(Required) id пользователя"
						},
						{
							"key": "subscriberId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос на получение списка подписок человека",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/users/:userId/subscriptions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"subscriptions"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Запрос на получение черного списка человека",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/users/:userId/black-list",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"black-list"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "Запрос на получение списка мероприятий пользователей на которых подписан человек",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/users/:userId/subscriptions/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"subscriptions",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				},
				"description": ""
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"async function createUser(email, name) {\r",
					"    const response = await pm.sendRequest({\r",
					"        url: pm.environment.get('apiUrl') + '/users',\r",
					"        method: 'POST',\r",
					"        header: {\r",
					"            'Content-Type': 'application/json'\r",
					"        },\r",
					"        body: {\r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify({\r",
					"                email: email,\r",
					"                name: name\r",
					"            })\r",
					"        }\r",
					"    });\r",
					"    return response.json();\r",
					"}\r",
					"\r",
					"const users = [\r",
					"    { email: 'user1@example.com', name: 'User One' },\r",
					"    { email: 'user2@example.com', name: 'User Two' },\r",
					"    { email: 'user3@example.com', name: 'User Three' },\r",
					"    { email: 'user4@example.com', name: 'User Four' }\r",
					"];\r",
					"\r",
					"(async () => {\r",
					"    for (const user of users) {\r",
					"        const createdUser = await createUser(user.email, user.name);\r",
					"        pm.environment.set(`userId_${user.name.split(' ').join('')}`, createdUser.id);\r",
					"    }\r",
					"})();"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}